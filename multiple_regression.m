% ввести початкові дані
clear all;
clc;
% ВВП (млрд грн) Y
y = [258.591 316.905 310.277 303.753 292.324 354.814 398 362.635 408.631 387.109 440.476 368.488 346.005 379.231 382.391 447.143 375.525 455.245 563.907 584.781];
%податки на продукти (млрд грн)X1
x1=[39.705 40.976 41.768 43.074 54.472	45.646 46.428 48.002 48.438 48.442 49.161 49.821 51.073	41.463 53.16 53.054 65.802 71.557 79.12	85.865];
% колективні споживчі витрати (млрд грн) X2
x2=[25.211 18.243 18.568 19.057 16.942	21.139	21.867	25.552	26.019	21.887	27.214	18.773	20.7 27.823 26.762 30.983 26.769 35.69 35.838 31.338];
%оплата праці найманим працівникам (млрд грн) X3
x3=[150.954 169.089 151.097 163.364 154.548 183.339	180.058 174.793 203.892 175.143 188.225 153.771 175.61	160.536 186.692 190.937 166.896 195.074 195.54 221.164];
m=3;
n=20;
X=[x1' x2' x3'];
D=[ones(n,1) X]; % формування вхідного масиву

fprintf('Вивід рівняння множинної регресії:  \n');
[b,bint,r,rint,stats]=regress (y', D, 0.05);

formatSpec='%4.4f+(%4.4f)*x1+(%4.4f)*x2+(%4.4f)*x3 \n';
fprintf(formatSpec,b(1),b(2), b(3), b(4));
%регресійне рівняння ВВП
regstats(y,X);
% Перевірка значущості параметрів вибіркового множинного рівняння регресії
t_tabl_kr=tinv(1-0.025, n-m-1)
C=inv(D'*D);
S=sum(r.^2)/(n-m-1)
tb1=b(1)/sqrt(S*C(1,1))
if abs(tb1)>t_tabl_kr 'коефіцієнт регресії a є значущим'
else 'коефіцієнт регресії a не є значущим'
end
tb2=b(2)/sqrt(S*C(2,2))
if abs(tb2)>t_tabl_kr 'коефіцієнт регресії b1 є значущим'
else 'коефіцієнт регресії b1 не є значущим'
end
tb3=b(3)/sqrt(S*C(3,3))
if abs(tb3)>t_tabl_kr 'коефіцієнт регресії b2 є значущим'
else 'коефіцієнт регресії b2 не є значущим'
end
tb4=b(4)/sqrt(S*C(4,4))
if abs(tb4)>t_tabl_kr 'коефіцієнт регресії b3 є значущим'
else 'коефіцієнт регресії b3 не є значущим'
end

%характеристики
fprintf ('Кореляційна матриця')
K=corrcoef ([y' x1' x2' x3'])
corrplot([y' x1' x2' x3'],'testR','on')
%коефіцієнт множинної кореляції 
fprintf('Коефіцієнт множинної кореляції :')
kor=sqrt(stats(1))
%коефіцієнт множинної детермінації
fprintf('Коефіцієнт множинної детермінації :')
R2=stats(1)

% частинні коефіцієнти кореляції
K1=inv(K)
Kch=-ones(m+1,m+1);
royy=-(K1(1,1))/sqrt(K1(1,1) * K1(1,1));
Kch(1,1)=royy;
royx1=-(K1(1,2))/sqrt(K1(1,1) * K1(2,2));
Kch(1,2)=royx1;
royx2=-(K1(1,3))/sqrt(K1(1,1) * K1(3,3));
Kch(1,3)=royx2;
royx3=-(K1(1,4))/sqrt(K1(1,1) * K1(4,4));
Kch(1,4)=royx3;
royx1y=-(K1(2,1))/sqrt(K1(2,2) * K1(1,1));
Kch(2,1)=royx1y;
royx1x1=-(K1(2,2))/sqrt(K1(2,2) * K1(2,2));
Kch(2,2)=royx1x1;
royx1x2=-(K1(2,3))/sqrt(K1(2,2) * K1(3,3));
Kch(2,3)=royx1x2;
royx1x3=-(K1(2,4))/sqrt(K1(2,2) * K1(4,4));
Kch(2,4)=royx1x3;
royx2y=-(K1(3,1))/sqrt(K1(3,3) * K1(1,1));
Kch(3,1)=royx2y;
royx2x1=-(K1(3,2))/sqrt(K1(3,3) * K1(2,2));
Kch(3,2)=royx2x1;
royx2x2=-(K1(3,3))/sqrt(K1(3,3) * K1(3,3));
Kch(3,3)=royx2x2;
royx2x3=-(K1(3,3))/sqrt(K1(3,3) * K1(4,4));
Kch(3,4)=royx2x3;
royx3y=-(K1(4,1))/sqrt(K1(4,4) * K1(1,1));
Kch(4,1)=royx3y;
royx3x1=-(K1(4,2))/sqrt(K1(4,4) * K1(2,2));
Kch(4,2)=royx3x1;
royx3x2=-(K1(4,3))/sqrt(K1(4,4) * K1(3,3));
Kch(4,3)=royx3x2;
royx3x3=-(K1(4,4))/sqrt(K1(4,4) * K1(4,4));
Kch(4,4)=royx3x3;


%регресійна статистика
% індекс множинної кореляції
fprintf ('індекс множинної кореляції R \n')
R_mnog = sqrt (1-sum (r.^2) / sum ((y-mean(y)).^2))
fprintf ('коефіцієнт детермінації R2 \n')
rsquare
fprintf ('нормований R2 \n')
adjrsquare

%дисперсійний аналіз
fprintf('dfr - число ступенів факторної дисперсії \n')
fstat.dfr
fprintf('dfe - число ступенів свободи залишкової дисперсії \n')
fstat.dfe
fprintf('SSr - факторна дисперсія \n')
fstat.ssr
fprintf('SSe - залишкова дисперсія \n')
fstat.sse
fprintf('F- критерій Фішера  \n')
fstat.f

% функції stepwize та ridge (функції усунення мультиколінеарності)
stepwise(X,y)
%
collintest([y' x1' x2' x3'],'tolIdx',10,'tolProp',0.5,'display','off','plot','on');







%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% ввести початкові дані
clear all;
clc;
%ВРП на душу населення (тис. грн.У)
Y=[14.529 16.644 17.088 17.91 18.86 19.249 19.551 19.92 20.253 21.722 22.082 22.096 22.675 23.379 24.387 24.558 24.838 25.872 25.95 27.07 29.972 30.656]';
%Середня зар.плата (тис. грн. Х)
X=[1.996 2.052 2.055 2.075 2.08 2.117 2.132 2.177 2.194 2.27 2.276 2.278 2.304 2.335 2.351 2.466 2.535 2.554 2.603 2.649	2.767	2.786]';
n=22;
m=1;
[n,m]=size (X);

% Будуємо рівняння парної лінійної регресії
fprintf('Рівняння парної лінійної регресії має вигляд: \n');
[b,dev,stats] = glmfit (X,Y);
formatSpec ='%4.4f+%4.4f*x\n';
fprintf(formatSpec,b(1),b(2));
fprintf('Статистики Стьюдента')
for i = 1:(m+1)
    tb(i) = b(i)/stats.se(i);
end
tb

%коефіцієнт кореляції і коефіцієнт детермінації
Rxy=corrcoef(X,Y);
fprintf('Коефіцієнт кореляції r:')
r=Rxy (1,2)
fprintf('Коефіцієнт детермінації R:')
R=r^2

%Критерій Фішера
fprintf('число ступенів свободи')
df=stats.dfe
fprintf('Критерій Фішера')
F_p=r^2/(1-r^2)*df

% Критерій Стьюдента
fprintf('Значення статистики t Стьюдента для параметрів рівняння регресії')
t_a0=stats.t(1)
t_a1=stats.t(2)

% Перевірка rxy за критерієм Стьюдента
t_rxy=r/sqrt((1-r^2)/df)

 

 
% графік лінії регресії
y_p=b(1)+b(2) *X;
plot (X,Y,'Color', [0.2, 0.8, 0.8], 'Marker', 'p', 'LineStyle', '--', 'MarkerSize', 10 )
hold on 
plot (X,y_p,'--')
title ('Графік лінії регресії')

%графічний аналіз залишків
e=Y-y_p;
figure
plot(X,e.^2, 'pm', 'MarkerSize', 12)
title ('Графік залишків моделі')
grid on
xlabel('ВВП')
ylabel('Відхилення e=Y-y_p')

%Тест Г.-К.
[Xsort Is]=sort (X);
for i=1:size(Y)
    Ysort(i,1)=Y(Is(i),1);
end
Dat=[Xsort Ysort];
c=fix(4*n/15);
k=fix((n-c)/2);
if floor(k)>0.4
    k=k+1
end
k;
%Вибірка 1
Dat1=Dat (1:k,:);
[b1, dev1,stats1]=glmfit(Dat1(:,1), Dat1(:,2));
S1=sum(stats1.resid.^2)

%Вибірка 2
Dat2=Dat (n-k+1:n,:);
[b2, dev2,stats2]=glmfit(Dat2(:,1), Dat2(:,2));
S2=sum(stats2.resid.^2)

%Перевірка гіпотези:
if S1>S2
    Fp=S1/S2;
else
    Fp=S2/S1;
end
F_kr=finv (0.95, k-m-1, k-m-1);
if Fp>F_kr fprintf('Гетероскедастичність присутня \n')
else fprintf ('Гетероскедастичність відсутня \n')
end

%Розрахунок параметрів регресії в умовах гетероскедастичності
[b11,stats3]=robustfit(X,Y);
fprintf('Рівняння має вигляд: \n')
formatSpec='%4.4f+%4.4f*x\n';
fprintf(formatSpec, b11(1),b11(2))
fprintf('Стандартні похибки:')
stats3.se
fprintf('Коефіцієнт детермінації R2:')
R2=stats3.coeffcorr(1,2)^2
fprintf('F-статистика:')
F=(R2/(1-R2))*(n-m-1)
fprintf('F-критичне:')
F_kr=finv (0.95,m,n-m-1)
if F>F_kr fprintf ('Модель значуща в цілому \n')
else fprintf ('Модель не є значуща в цілому \n')
end

% Коефіцієнт детермінації, критерій Стьюдента, критерій Фішера 
X = [ones(n,1) X];
[b,bint,r,rint,stats] = regress (Y,X,0.05);
% Коефіцієнт детермінації
R2 = stats(1)
 
% Послідовно-часовий графік моделі
i = zeros (n,1);
for j=1:n
    i(j) = i(j)+j;
end
plot (i,r,'k+-', 'MarkerSize', 12)
grid on
title ('Послідовно-часовий графік')
xlabel ('t')
ylabel ('et')
 
% Критерій Дарбіна-Уотсона
s = 0;
for i = 2:n
    s = s + (r(i)-r(i-1)).^2;
end
ch_DW = s;
zn_DW = sum (r.^2);
fprintf('Критерій Дарбіна-Уотсона дорівнює: \n')
DW = ch_DW/zn_DW
dn= 1.35;
dv = 1.49;
if DW >= 0 & DW < dn
    fprintf('Існує додатна автокореляція \n')
end
if DW >= dn & DW < dv
    fprintf('Висновок про наявність чи відсутність автокореляції зробити не можна \n')
end
if DW >= 4-dv & DW < 4-dn
    fprintf('Висновок про наявність чи відсутність автокореляції зробити не можна \n')
end
if DW >= dv & DW < 4-dv
    fprintf('Автокореляція відсутня \n')
end
if DW >= 4-dn & DW <= 4
    fprintf('Існує відємна автокореляція \n')
end
 
autocorr(Y)
% перевірка формули 2(1-ro)
ro1 = 0;
for i = 2:n
    ro1 = ro1 + r(i)*r(i-1);
end
ro1 = ro1/sum(r.^2)
fprintf('Перевірка формули DW = 2*(1-ro1): \n')
DW
2*(1-ro1)
 
% УМНК (створюємо два нові масиви, оцінка коефіцієнта автокореляції 1-го порядку)
ro1 = 1 - DW/2
for i = 2:n
    y_nov (i,1) = Y(i) - ro1*Y(i-1);
    x_nov (i,1) = X(i) - ro1*X(i-1);
end
 
% Будуємо рівняння регресії на основі нового масиву
X_nov = [ones(n,1) x_nov];
fprintf('Рівняння регресії на основі новово масиву має вигляд: \n');
[bnew,bint,r,rint,stats] = regress (y_nov,X_nov,0.05);
formatSpec ='%4.4f+%4.4f*x_nov\n';
fprintf(formatSpec,bnew(1),bnew(2));
 
bnew(1) = bnew(1)/(1-ro1);
y_n = bnew(1) + bnew(2)*x_nov;
fprintf('Рівняння регресії:')
fprintf(formatSpec,bnew(1),bnew(2));
e = y_nov - y_n;
R2 = 1-sum(e.^2)/sum((y_nov - mean (y_nov)).^2)
F = (R2/(1-R2))*(n-m-1);
F_kr = finv(0.95,m,n-m-1);
if F > F_kr fprintf('Модель значуща в цілому')
else
    fprintf('Модель не є значущою')
end



